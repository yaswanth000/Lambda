import boto3
from datetime import datetime, timedelta
import json

def get_ec2_instances_in_state(instance_states):
    ec2_client = boto3.client('ec2')
    Final_instance_list = ec2_client.describe_instances(Filters=[{'Name': 'instance-state-name', 'Values': instance_states}])

    instance_ids = []
    for result in Final_instance_list['Reservations']:
        for instance in result['Instances']:
            instance_ids.append(instance['InstanceId'])

    return instance_ids

def lambda_handler(event, context):
    CW_client = boto3.client('cloudwatch')
    sns_client = boto3.client('sns')
    end_time = datetime.utcnow()
    start_time = end_time - timedelta(days=7)
    response_instance_states = ['running']

    ec2_instances_to_metrics = get_ec2_instances_in_state(response_instance_states)

    metrics = ['CPUUtilization', 'MemoryUtilization', 'DiskSpaceUtilization']
    statistics = ['Maximum', 'Average']
    metrics_weekly = []

    for instance_id in ec2_instances_to_metrics:
        instance_row = {'InstanceId': instance_id}
        
        for metric_name in metrics:
            response = CW_client.get_metric_statistics(
                Namespace='AWS/EC2',
                MetricName=metric_name,
                Dimensions=[
                    {
                        'Name': 'InstanceId',
                        'Value': instance_id
                    },
                ],
                StartTime=start_time,
                EndTime=end_time,
                Period=300,
                Statistics=statistics
            )
            if 'Datapoints' in response:
                CW_data = response['Datapoints']
                if CW_data:
                    max_data = max(CW_data, key=lambda x: x['Maximum'])

                    timestamp_at_max_value = max_data['Timestamp']
                    instance_row[f'{metric_name}_Max'] = max_data['Maximum']
                    instance_row[f'{metric_name}_Avg'] = sum([datapoint['Average'] for datapoint in CW_data]) / len(CW_data)
                    instance_row[f'{metric_name}_Timestamp_Max'] = str(timestamp_at_max_value)
                else:
                    print(f'No datapoints found for the {metric_name} metric for instance {instance_id}.')
            else:
                print(f'Error retrieving {metric_name} metric data from CloudWatch for instance {instance_id}.')

        metrics_weekly.append(instance_row)

    formatted_message = "\n".join(json.dumps(row, indent=2) for row in metrics_weekly)
    sns_message = {
        'DataTableType': 'EC2InstanceMetrics',
        'MetricRows': metrics_weekly,
        'StartTime': str(start_time),
        'EndTime': str(end_time)
    }

    sns_client.publish(
        TopicArn='kishore1996p@gmail.com',
        Message=json.dumps(sns_message, indent=2),
        Subject='Weekly EC2 Instance Metrics Report'
    )

    return {
        'statusCode': 200,
        'body': json.dumps('Weekly Metrics sent successfully to the email through SNS service.')
    }
