AWSTemplateFormatVersion: '2010-09-09'
Resources:
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: awslambdasourcebucketnew
  DestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: awslambdadestinationbucketnew
  LambdaExecutionRole:
    Type: AWS::IAM::Role
    Properties:
      AssumeRolePolicyDocument:
        Version: '2012-10-17'
        Statement:
        - Effect: Allow
          Principal:
            Service:
              - lambda.amazonaws.com
          Action:
          - 's3:*'
          - 's3-object-lambda:*'
          Resource: '*'
  SourceBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: awslambdasourcebucketnew
  DestinationBucket:
    Type: AWS::S3::Bucket
    Properties:
      BucketName: awslambdadestinationbucketnew
  S3Trigger:
    Type: AWS::Lambda::EventSourceMapping
    Properties:
      FunctionName: !GetAtt CopyFunction.Arn
      EventSourceArn: !GetAtt SourceBucket.Arn
      BatchSize: 10
      StartingPosition: LATEST
  CopyFunction:
    Type: AWS::Lambda::Function
    Properties:
      FunctionName: CopyFunction
      Handler: index.handler
      Role: !GetAtt LambdaExecutionRole.Arn
      Code:
        ZipFile: |
          import boto3

          def lambda_handler(event, context):
          source_bucket = event['Records'][0]['s3']['bucket']['name']
          source_key = event['Records'][0]['s3']['object']['key']
          destination_bucket = 'awslambdadestinationbucketnew'
          destination_key = 'copied/' + source_key

          s3 = boto3.client('s3')
          copy_source = {'Bucket': source_bucket, 'Key': source_key}
          s3.copy_object(Bucket=destination_bucket, Key=destination_key, CopySource=copy_source)
      Runtime: python3.9